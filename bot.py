import os
import asyncio
import logging
import json
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from pathlib import Path

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
API_TOKEN = os.getenv('API_TOKEN')

if not API_TOKEN:
    logger.error("API_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
    exit(1)

bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
USERS_FILE = Path("users.json")

# –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
def load_users():
    if USERS_FILE.exists():
        try:
            with open(USERS_FILE, 'r', encoding='utf-8') as f:
                return set(json.load(f))
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ users.json: {e}")
    return set()

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
def save_users(users):
    try:
        with open(USERS_FILE, 'w', encoding='utf-8') as f:
            json.dump(list(users), f, ensure_ascii=False, indent=2)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è users.json: {e}")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –Ω–∞–±–æ—Ä –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_ids = load_users()

@dp.message(Command("start"))
async def send_welcome(message: types.Message):
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫
    user_id = message.from_user.id
    if user_id not in user_ids:
        user_ids.add(user_id)
        save_users(user_ids)
        logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id}")
    
    kb = [
        [types.KeyboardButton(text="06.10 - 10.10 II –Ω–µ–¥–µ–ª—è")],
        [types.KeyboardButton(text="13.10 - 17.10 I –Ω–µ–¥–µ–ª—è")],
        [types.KeyboardButton(text="20.10 - 24.10 II –Ω–µ–¥–µ–ª—è")],
        [types.KeyboardButton(text="27.10 - 31.10 I –Ω–µ–¥–µ–ª—è")]
    ]
    keyboard = types.ReplyKeyboardMarkup(
        keyboard=kb, 
        resize_keyboard=True,
        input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–¥–µ–ª—é"
    )
    await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —É–∑–Ω–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ üóì", reply_markup=keyboard)

@dp.message(Command("broadcast"))
async def broadcast_command(message: types.Message):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ ID, –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    ADMIN_IDS = os.getenv('ADMIN_IDS', '').split(',')
    
    if str(message.from_user.id) not in ADMIN_IDS and message.from_user.id != message.from_user.id:  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É —Å–≤–æ–µ–≥–æ ID
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ (–≤—Å—ë –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /broadcast)
    broadcast_text = message.text.replace('/broadcast', '').strip()
    
    if not broadcast_text:
        await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /broadcast <—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è>")
        return
    
    await message.answer(f"üîÑ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É –¥–ª—è {len(user_ids)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
    
    success_count = 0
    fail_count = 0
    
    # –†–∞—Å—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    for user_id in user_ids.copy():  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–ø–∏—é –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏
        try:
            await bot.send_message(user_id, f"üì¢ <b>–í–∞–∂–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:</b>\n\n{broadcast_text}", parse_mode="HTML")
            success_count += 1
            # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–≤—ã—Å–∏—Ç—å –ª–∏–º–∏—Ç—ã Telegram
            await asyncio.sleep(0.1)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
            fail_count += 1
            # –£–¥–∞–ª—è–µ–º –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–ø–∏—Å–∫–∞
            user_ids.discard(user_id)
    
    save_users(user_ids)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
    await message.answer(f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n–£—Å–ø–µ—à–Ω–æ: {success_count}\n–ù–µ —É–¥–∞–ª–æ—Å—å: {fail_count}")

@dp.message(Command("stats"))
async def stats_command(message: types.Message):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ broadcast_command)
    ADMIN_IDS = os.getenv('ADMIN_IDS', '').split(',')
    
    if str(message.from_user.id) not in ADMIN_IDS and message.from_user.id != message.from_user.id:  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É —Å–≤–æ–µ–≥–æ ID
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    await message.answer(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(user_ids)}")

# –û—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
@dp.message(lambda message: message.text == "06.10 - 10.10 II –Ω–µ–¥–µ–ª—è")
async def handle_week1(message: types.Message):
    schedule_text = """
<b> üóì –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ II –Ω–µ–¥–µ–ª—é 06.10 - 10.10 </b>

<i> 06.10 –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ </i>
‚Ä¢ 9:40 - 11:10   –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞ (–õ–µ–∫—Ü–∏—è)  –ê 318
‚Ä¢ 11:20 - 12:50   –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞ (–õ–µ–∫—Ü–∏—è)  –ê 318

<i> 07.10 –í—Ç–æ—Ä–Ω–∏–∫ </i>
‚Ä¢ 11:20 - 12:50   –§–ö–∏–° (–ü—Ä.)  –í 404
‚Ä¢ 14:50 - 16:20   –ò–Ø (–ü—Ä. 2 –ø–æ–¥–≥—Ä—É–ø–ø–∞)  –ê 217
‚Ä¢ 16:30 - 18:00   –ò–Ø (–ü—Ä. 2 –ø–æ–¥–≥—Ä—É–ø–ø–∞)  –ê 217

<i> 08.10 –°—Ä–µ–¥–∞ </i>
‚Ä¢ 9:40 - 11:10   –ò–† (–õ–µ–∫—Ü–∏—è)  –ê 354
‚Ä¢ 11:20 - 12:50   –î–ö–∏–†–Ø (–õ–µ–∫—Ü–∏—è)  –ê 354

<i> 09.10 –ß–µ—Ç–≤–µ—Ä–≥ </i>
‚Ä¢ 8:00 - 9:30   –ò–∏–ö–ì (–õ–ë 2 –ø–æ–¥–≥—Ä—É–ø–ø–∞)  –í 121
‚Ä¢ 9:40 - 11:10   –ò–∏–ö–ì (–õ–ë 2 –ø–æ–¥–≥—Ä—É–ø–ø–∞)  –í 121
‚Ä¢ 11:20 - 12:50   –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞ (–ü—Ä.)  –í 504
‚Ä¢ 13:10 - 14:40   –§–∏–∑–∏–∫–∞ (–õ–ë 1 –ø–æ–¥–≥—Ä—É–ø–ø–∞)  –í 509
‚Ä¢ 14:50 - 16:20   –§–∏–∑–∏–∫–∞ (–õ–ë 1 –ø–æ–¥–≥—Ä—É–ø–ø–∞)  –í 509

<i> 10.10 –ü—è—Ç–Ω–∏—Ü–∞ </i>
‚Ä¢ 11:20 - 12:50   –î–ö–∏–†–Ø (–ü—Ä.)  –ê 318
‚Ä¢ 13:10 - 14:40   –ò–† (–ü—Ä.)  –ê 436
‚Ä¢ 14:50 - 16:20   –≠–ö–ø–æ–§–ö–∏–° (–ü—Ä.) –í —Å–ø–æ—Ä—Ç.–∑–∞–ª
    """
    await message.answer(schedule_text, parse_mode="HTML")

@dp.message(lambda message: message.text == "13.10 - 17.10 I –Ω–µ–¥–µ–ª—è")
async def handle_week1(message: types.Message):
    schedule_text = """
<b> üóì –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ I –Ω–µ–¥–µ–ª—é 13.10 - 17.10 </b>

<i> 13.10 –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ </i>

‚Ä¢ 8:00 - 9:30   –§–ö–∏–° (–õ–µ–∫—Ü–∏—è)  –ê 318
‚Ä¢ 9:40 - 11:10   –§–∏–∑–∏–∫–∞ (–õ–µ–∫—Ü–∏—è)  –ê 318
‚Ä¢ 11:20 - 12:50   –ò–† (–õ–µ–∫—Ü–∏—è)  –ê 318

<i> 14.10 –í—Ç–æ—Ä–Ω–∏–∫ </i>

‚Ä¢ 11:20 - 12:50   –≠–ö–ø–æ–§–ö–∏–° (–ü—Ä.)  –í —Å–ø–æ—Ä—Ç.–∑–∞–ª
‚Ä¢ 14:50 - 16:20   –ò–Ø (–ü—Ä. 1 –ø–æ–¥–≥—Ä—É–ø–ø–∞)  –ê 217
‚Ä¢ 16:30 - 18:00   –ò–Ø (–ü—Ä. 1 –ø–æ–¥–≥—Ä—É–ø–ø–∞)  –ê 217

<i> 15.10 –°—Ä–µ–¥–∞ </i>

‚Ä¢ 9:40 - 11:10   –ò–† (–õ–µ–∫—Ü–∏—è)  –ê 354
‚Ä¢ 11:20 - 12:50   –î–ö–∏–†–Ø (–õ–µ–∫—Ü–∏—è)  –ê 354

<i> 16.10 –ß–µ—Ç–≤–µ—Ä–≥ </i>

‚Ä¢ 8:00 - 9:30   –ò–∏–ö–ì (–õ–ë 1 –ø–æ–¥–≥—Ä—É–ø–ø–∞)  –í 121
‚Ä¢ 9:40 - 11:10   –ò–∏–ö–ì (–õ–ë 1 –ø–æ–¥–≥—Ä—É–ø–ø–∞)  –í 121
‚Ä¢ 11:20 - 12:50   –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞ (–ü—Ä.)  –í 504
‚Ä¢ 13:10 - 14:40   –§–∏–∑–∏–∫–∞ (–õ–ë 2 –ø–æ–¥–≥—Ä—É–ø–ø–∞)  –í 509
‚Ä¢ 14:50 - 16:20   –§–∏–∑–∏–∫–∞ (–õ–ë 2 –ø–æ–¥–≥—Ä—É–ø–ø–∞)  –í 509

<i> 17.10 –ü—è—Ç–Ω–∏—Ü–∞ </i>

‚Ä¢ 11:20 - 12:50   –î–ö–∏–†–Ø (–ü—Ä.)  –ê 318
‚Ä¢ 13:10 - 14:40   –ò–† (–ü—Ä.)  –ê 436
‚Ä¢ 14:50 - 16:20   –≠–ö–ø–æ–§–ö–∏–° (–ü—Ä.) –í —Å–ø–æ—Ä—Ç.–∑–∞–ª
    """
    await message.answer(schedule_text, parse_mode="HTML")

@dp.message(lambda message: message.text == "20.10 - 24.10 II –Ω–µ–¥–µ–ª—è")
async def handle_week22(message: types.Message):
    schedule_text = """
<b> üóì –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ II –Ω–µ–¥–µ–ª—é 06.10 - 10.10 </b>

<i> 20.10 –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ </i>

‚Ä¢ 9:40 - 11:10   –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞ (–õ–µ–∫—Ü–∏—è)  –ê 318
‚Ä¢ 11:20 - 12:50   –ò–∏–ö–ì (–õ–µ–∫—Ü–∏—è)  –ê 318

<i> 21.10 –í—Ç–æ—Ä–Ω–∏–∫ </i>

‚Ä¢ 11:20 - 12:50   –§–ö–∏–° (–ü—Ä.)  –í 404
‚Ä¢ 14:50 - 16:20   –ò–Ø (–ü—Ä. 2 –ø–æ–¥–≥—Ä—É–ø–ø–∞)  –ê 217
‚Ä¢ 16:30 - 18:00   –ò–Ø (–ü—Ä. 2 –ø–æ–¥–≥—Ä—É–ø–ø–∞)  –ê 217

<i> 22.10 –°—Ä–µ–¥–∞ </i>

‚Ä¢ 9:40 - 11:10   –ò–† (–õ–µ–∫—Ü–∏—è)  –ê 354
‚Ä¢ 11:20 - 12:50   –î–ö–∏–†–Ø (–õ–µ–∫—Ü–∏—è)  –ê 354

<i> 23.10 –ß–µ—Ç–≤–µ—Ä–≥ </i>

‚Ä¢ 8:00 - 9:30   –ò–∏–ö–ì (–õ–ë 2 –ø–æ–¥–≥—Ä—É–ø–ø–∞)  –í 121
‚Ä¢ 9:40 - 11:10   –ò–∏–ö–ì (–õ–ë 2 –ø–æ–¥–≥—Ä—É–ø–ø–∞)  –í 121
‚Ä¢ 11:20 - 12:50   –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞ (–ü—Ä.)  –í 504
‚Ä¢ 13:10 - 14:40   –§–∏–∑–∏–∫–∞ (–õ–ë 1 –ø–æ–¥–≥—Ä—É–ø–ø–∞)  –í 509
‚Ä¢ 14:50 - 16:20   –§–∏–∑–∏–∫–∞ (–õ–ë 1 –ø–æ–¥–≥—Ä—É–ø–ø–∞)  –í 509

<i> 24.10 –ü—è—Ç–Ω–∏—Ü–∞ </i>

‚Ä¢ 11:20 - 12:50   –î–ö–∏–†–Ø (–ü—Ä.)  –ê 318
‚Ä¢ 13:10 - 14:40   –ò–† (–ü—Ä.)  –ê 436
‚Ä¢ 14:50 - 16:20   –≠–ö–ø–æ–§–ö–∏–° (–ü—Ä.) –í —Å–ø–æ—Ä—Ç.–∑–∞–ª
    """
    await message.answer(schedule_text, parse_mode="HTML")

@dp.message(lambda message: message.text == "27.10 - 31.10 I –Ω–µ–¥–µ–ª—è")
async def handle_week11(message: types.Message):
    schedule_text = """
<b> üóì –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ I –Ω–µ–¥–µ–ª—é 27.10 - 31.10 </b>

<i> 27.10 –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ </i>

‚Ä¢ 8:00 - 9:30   –§–ö–∏–° (–õ–µ–∫—Ü–∏—è)  –ê 318
‚Ä¢ 9:40 - 11:10   –§–∏–∑–∏–∫–∞ (–õ–µ–∫—Ü–∏—è)  –ê 318
‚Ä¢ 11:20 - 12:50   –ò–† (–õ–µ–∫—Ü–∏—è)  –ê 318

<i> 28.10 –í—Ç–æ—Ä–Ω–∏–∫ </i>

‚Ä¢ 11:20 - 12:50   –≠–ö–ø–æ–§–ö–∏–° (–ü—Ä.)  –í —Å–ø–æ—Ä—Ç.–∑–∞–ª
‚Ä¢ 14:50 - 16:20   –ò–Ø (–ü—Ä. 1 –ø–æ–¥–≥—Ä—É–ø–ø–∞)  –ê 217
‚Ä¢ 16:30 - 18:00   –ò–Ø (–ü—Ä. 1 –ø–æ–¥–≥—Ä—É–ø–ø–∞)  –ê 217

<i> 29.10 –°—Ä–µ–¥–∞ </i>

‚Ä¢ 9:40 - 11:10   –ò–† (–õ–µ–∫—Ü–∏—è)  –ê 354
‚Ä¢ 11:20 - 12:50   –î–ö–∏–†–Ø (–õ–µ–∫—Ü–∏—è)  –ê 354

<i> 30.10 –ß–µ—Ç–≤–µ—Ä–≥ </i>

‚Ä¢ 8:00 - 9:30   –ò–∏–ö–ì (–õ–ë 1 –ø–æ–¥–≥—Ä—É–ø–ø–∞)  –í 121
‚Ä¢ 9:40 - 11:10   –ò–∏–ö–ì (–õ–ë 1 –ø–æ–¥–≥—Ä—É–ø–ø–∞)  –í 121
‚Ä¢ 11:20 - 12:50   –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞ (–ü—Ä.)  –í 504
‚Ä¢ 13:10 - 14:40   –§–∏–∑–∏–∫–∞ (–õ–ë 2 –ø–æ–¥–≥—Ä—É–ø–ø–∞)  –í 509
‚Ä¢ 14:50 - 16:20   –§–∏–∑–∏–∫–∞ (–õ–ë 2 –ø–æ–¥–≥—Ä—É–ø–ø–∞)  –í 509

<i> 31.10 –ü—è—Ç–Ω–∏—Ü–∞ </i>

‚Ä¢ 11:20 - 12:50   –î–ö–∏–†–Ø (–ü—Ä.)  –ê 318
‚Ä¢ 13:10 - 14:40   –ò–† (–ü—Ä.)  –ê 436
‚Ä¢ 14:50 - 16:20   –≠–ö–ø–æ–§–ö–∏–° (–ü—Ä.) –í —Å–ø–æ—Ä—Ç.–∑–∞–ª
    """
    await message.answer(schedule_text, parse_mode="HTML")

@dp.message()
async def handle_other_messages(message: types.Message):
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –Ω–µ–¥–µ–ª–∏ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—É /start")

async def main():
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(user_ids)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    try:
        bot_info = await bot.get_me()
        logger.info(f"–ë–æ—Ç @{bot_info.username} —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω!")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        return
    
    # –î–ª—è Render —Å –≤–µ–±—Ö—É–∫–∞–º–∏
    await dp.start_polling(bot, skip_updates=True)

if __name__ == "__main__":
    asyncio.run(main())